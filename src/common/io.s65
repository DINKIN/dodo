            .include "zeropage.inc65"
            .include "util.inc65"

		.export led_on
		.export led_off
            .export wait
            .export load_music
            .export play_effect
            .export io_init
            .export irq_reset
            .export serial_init
            .export serial_copy
            .export spi_enable
            .export spi_disable
            .export spi_write
            .export load_game
            .export flash_game

            SPI_WREN = $06
            SPI_WRDI = $04
            SPI_RDSR = $05
            SPI_WRSR = $01
            SPI_READ = $03
            SPI_WRIT = $02
            SPI_RDID = $9F

            PORTB = $6000
            PORTA = $6001
            DDRB  = $6002
            DDRA  = $6003
            T1CL  = $6004
            T1CH  = $6005
            T1LL  = $6006
            T1LH  = $6007
            T2CL  = $6008
            T2CH  = $6009
            SR    = $600A
            ACR   = $600B
            PCR   = $600C
            IFR   = $600D
            IER   = $600E
            ORAX  = $600F

            ACIA_DATA = $5000
            ACIA_STATUS = $5001
            ACIA_COMMAND = $5002
            ACIA_CONTROL = $5003

            _D1 = 210
            _G1 = 158
            _D2 = 104
            _C = 118
            _B = 125
            _A = 140
            _G2 = 78
            _P = 1

		.code

led_on:
		ldx #%11000000
            stx PORTA  
		rts

led_off:
		ldx #%00000000
            stx PORTA  			
            rts

io_init:
            lda #%11000000        ; Set port A outputs / inputs
            sta DDRA
            ldx #%11000000
            stx PORTA      

            lda #%01111111        ; Set port B outputs / inputs
            sta DDRB
            ldx #%01111110
            stx PORTB     

            lda #0                ; Setup interrupts     
            sta irq_status

            lda #$4E
            sta T1CL
            lda #$C3
            sta T1CH

            lda ACR
            and #%01111111
            ora #%01000000
            ora #%00010000      ; For sound (T2 free running)
            sta ACR
            lda #%11000000
            sta IER
            
            ; Music
            ; Init music
            ;lda #<music             ; put pointer to music in music_mem
            ;sta music_mem
            ;lda #>music
            ;sta music_mem + 1
            
            lda #0
            sta music_mem
            sta music_mem + 1
            sta music_index
            sta effect_mem
            sta effect_mem + 1
            sta effect_index
            lda #1
            sta music_dec
            sta effect_dec

            lda #15             ; Low octave
            sta SR
            lda #0
            sta T2CL
            rts

load_music:
            sta music_mem
            stx music_mem + 1
            rts

play_effect:
            sta effect_mem
            stx effect_mem + 1
            lda #0
            sta effect_index
            lda #1
            sta effect_dec
            rts

process_music:            
            lda music_mem          ; If music not loaded, return
            beq @done_music

            dec music_dec
            bne @done_music        ; if counter not at zero return

@process_freq:
            ldy music_index
            ldx effect_mem         ; If effect is loaded, skip actually writing out fequency
            bne @skip_freq
            lda (music_mem), y     ; process current index
            sta T2CL
@skip_freq:
            iny
            lda (music_mem), y
            bne @process_dur       ; If Dur = 0, loop back to start
            lda #0
            sta music_index
            jmp @process_freq
@process_dur:        
            iny                    ; Increment index, for next time in function
            sty music_index 
            sta music_dec
@done_music:
            lda effect_mem
            beq @done_effect

            dec effect_dec
            bne @done_effect
@process_freq_effect:
            ldy effect_index
            lda (effect_mem), y
            sta T2CL
            iny
            lda (effect_mem), y
            bne @process_dur_effect
            lda #0
            sta effect_index
            jmp @process_freq_effect
@process_dur_effect:
            iny
            sty effect_index
            sta effect_dec
@done_effect:
            rts


serial_init:
            lda #%00001011              ;No parity, no echo, no interrupt
            sta ACIA_COMMAND
            lda #%00011111              ;1 stop bit, 8 data bits, 19200 baud
            sta ACIA_CONTROL
            rts

serial_putc:
            pha
@wait_txd_empty:
            lda ACIA_STATUS
            and #$10
            beq @wait_txd_empty
            pla
            sta ACIA_DATA
            rts

serial_getc:
@wait_rxd_full:
            lda ACIA_STATUS
            and #$08
            beq @wait_rxd_full
            lda ACIA_DATA
            rts

serial_copy:
            lda #'R'
            jsr serial_putc

            lda #$00
            sta ptr1
            lda #$1c
            sta ptr1+1

            ldy #0
            ldx #32

@loop:
            jsr serial_getc           
            sta (ptr1), y

            iny
            bne @loop

            dex
            beq @done

            inc ptr1+1
            jmp @loop

@done:
            rts

irq_reset:
            bit T1CL        ; Mark interrupt as read
            lda #1
            sta irq_status
            jmp process_music
            rts

wait:
            lda #0
            sta irq_status
@loop:      lda irq_status
            beq @loop
            rts

; void spi_enable()
spi_enable:
            lda #%00111100
            sta PORTB
            rts

; void spi_disable()
spi_disable:
            lda #%00111110
            sta PORTB
            rts

; unsigned char spi_write(unsigned char v)
spi_write:
            sta tmp1
            ldy #0
            sty tmp2
            ldx #8
@begin:
            lda #%00111100
            asl tmp1
            bcc @skip_write
            ora #%01000000
@skip_write: 
            sta PORTB         ; Write bit to mosi (clock is still low)
            nop
            inc PORTB         ; Clock High
            clc
            bit PORTB         ; Read miso
            bpl @skip_read
            sec
@skip_read:
            rol tmp2
            ;dec PORTB         ; Clock low
            dex
            bne @begin
            lda tmp2
            ldx #0
            rts

load_game:
            lda #$00
            sta ptr1
            lda #$1c
            sta ptr1+1

            jsr spi_enable

            lda #SPI_READ
            jsr spi_write

            lda #0
            jsr spi_write
            lda #0
            jsr spi_write

            ldy #0
            ldx #32

@loop:
            tya
            pha
            txa
            pha

            lda #0
            jsr spi_write
            sta tmp1
            
            pla
            tax
            pla
            tay
            
            lda tmp1      

            sta (ptr1), y

            iny
            bne @loop

            dex
            beq @done

            inc ptr1+1
            jmp @loop

@done:
            jsr spi_disable
            rts

flash_game:
            lda #$00
            sta ptr1
            lda #$1c
            sta ptr1+1

            jsr spi_enable
            lda #SPI_WREN
            jsr spi_write
            jsr spi_disable

            jsr spi_enable


            lda #SPI_WRIT
            jsr spi_write

            lda #0
            jsr spi_write
            lda #0
            jsr spi_write

            ldy #0
            ldx #32

@loop:
            tya
            pha
            txa
            pha

            lda (ptr1), y
            jsr spi_write

            pla
            tax
            pla
            tay

            iny
            bne @loop

            dex
            beq @done

            inc ptr1+1
            jmp @loop

@done:
            jsr spi_disable

            jsr spi_enable
            lda #SPI_WRDI
            jsr spi_write
            jsr spi_disable

            rts


