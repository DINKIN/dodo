            .include "zeropage.inc65"
            .include "util.inc65"

		.export _led_on
		.export _led_off
            .export _wait
            .export _load_music
            .export _play_effect
            .export io_init
            .export irq_reset
            .export serial_init
            .export serial_alive


            PORTB = $6000
            PORTA = $6001
            DDRB  = $6002
            DDRA  = $6003
            T1CL  = $6004
            T1CH  = $6005
            T1LL  = $6006
            T1LH  = $6007
            T2CL  = $6008
            T2CH  = $6009
            SR    = $600A
            ACR   = $600B
            PCR   = $600C
            IFR   = $600D
            IER   = $600E
            ORAX  = $600F

            ACIA_DATA = $5000
            ACIA_STATUS = $5001
            ACIA_COMMAND = $5002
            ACIA_CONTROL = $5003

            _D1 = 210
            _G1 = 158
            _D2 = 104
            _C = 118
            _B = 125
            _A = 140
            _G2 = 78
            _P = 1

		.code

_led_on:
		ldx #%11000000
            stx PORTA  
		rts

_led_off:
		ldx #%00000000
            stx PORTA  			
            rts

io_init:
            lda #%11000000        ; Set port A outputs / inputs
            sta DDRA
            ldx #%11000000
            stx PORTA      

            lda #0                ; Setup interrupts     
            sta irq_status

            lda #$4E
            sta T1CL
            lda #$C3
            sta T1CH

            lda ACR
            and #%01111111
            ora #%01000000
            ora #%00010000      ; For sound (T2 free running)
            sta ACR
            lda #%11000000
            sta IER
            
            ; Music
            ; Init music
            ;lda #<music             ; put pointer to music in music_mem
            ;sta music_mem
            ;lda #>music
            ;sta music_mem + 1
            
            lda #0
            sta music_mem
            sta music_mem + 1
            sta music_index
            sta effect_mem
            sta effect_mem + 1
            sta effect_index
            lda #1
            sta music_dec
            sta effect_dec

            lda #15             ; Low octave
            sta SR
            lda #0
            sta T2CL
            rts

_load_music:
            sta music_mem
            stx music_mem + 1
            rts

_play_effect:
            sta effect_mem
            stx effect_mem + 1
            lda #0
            sta effect_index
            lda #1
            sta effect_dec
            rts

process_music:            
            lda music_mem          ; If music not loaded, return
            beq @done_music

            dec music_dec
            bne @done_music        ; if counter not at zero return

@process_freq:
            ldy music_index
            ldx effect_mem         ; If effect is loaded, skip actually writing out fequency
            bne @skip_freq
            lda (music_mem), y     ; process current index
            sta T2CL
@skip_freq:
            iny
            lda (music_mem), y
            bne @process_dur       ; If Dur = 0, loop back to start
            lda #0
            sta music_index
            jmp @process_freq
@process_dur:        
            iny                    ; Increment index, for next time in function
            sty music_index 
            sta music_dec
@done_music:
            lda effect_mem
            beq @done_effect

            dec effect_dec
            bne @done_effect
@process_freq_effect:
            ldy effect_index
            lda (effect_mem), y
            sta T2CL
            iny
            lda (effect_mem), y
            bne @process_dur_effect
            lda #0
            sta effect_index
            jmp @process_freq_effect
@process_dur_effect:
            iny
            sty effect_index
            sta effect_dec
@done_effect:
            rts


serial_init:
            lda #%00001011              ;No parity, no echo, no interrupt
            sta ACIA_COMMAND
            lda #%00011111              ;1 stop bit, 8 data bits, 19200 baud
            sta ACIA_CONTROL
            rts

serial_alive:
            ldx #0
@next_char:
@wait_txd_empty:     
            lda ACIA_STATUS
            and #$10
            beq @wait_txd_empty
            lda text,x
            beq @done
            sta ACIA_DATA
            inx
            jmp @next_char
@done:
            rts



irq_reset:
            bit T1CL        ; Mark interrupt as read
            lda #1
            sta irq_status
            jmp process_music
            rts

_wait:
            lda #0
            sta irq_status
@loop:      lda irq_status
            beq @loop
            rts


text:               .byte "0xDEADBEEF", $0d, $0a, $00
;music:   .byte _D1, 2, 0, 1, _D1, 2, 0, 1, _D1, 3, _G1, 18, _D2, 18, _C, 3, _B, 3, _A, 3, _G2, 18, _D2, 9, _C, 3, _B, 3, _A, 3, _G2, 18, _D2, 9, _C, 3, _B, 3, _C, 3, _A, 18, 0, 0
