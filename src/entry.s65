                .include "zeropage.inc65"
                .include "display.inc65"
                .include "util.inc65"
                .include "io.inc65"
                .include "text.inc65"

                .setcpu "6502"

                .export _init
                .export _exit


                .segment "VECTORS"
                .addr nmi
                .addr _init
                .addr irq

                .code

nmi:            rti

irq:                    
                pha
                txa
                pha
                tya
                pha

                clc
                cld
                clv
                jsr irq_reset       ; Mark interrupt as read
                
                pla
                tay
                pla
                tax
                pla

                rti

_init:
                sei                
                cld
                clv
                ldx #$ff
                txs

                jsr io_init
                jsr ssd1305_init
                jsr text_init

                jsr led_off


.ifdef __DEVICE__
@wait_key:
                lda $7F01
                ldx invert_buttons
                bne @not_inverted
                eor #$ff
@not_inverted:                
                pha
                and #16
                beq @load
                pla
                and #32
                beq @flash
                jmp @wait_key

@flash:                
                jsr serial_init
                jsr serial_get_mode

                cmp #'S'
                bne @copy_game

                jmp flash_system

@copy_game:
                jsr led_off

                jsr clear

                lda #<flashing
                sta ptr1
                lda #>flashing
                sta ptr1+1

                lda #0
                sta text_row
                sta text_col

                jsr draw_string_internal

                lda #<game
                sta ptr1
                lda #>game
                sta ptr1+1

                lda #3
                sta text_row

                jsr draw_string_internal

                jsr display

                jsr serial_ack
                jsr serial_copy
                jsr led_on
                jsr flash_game
                jsr serial_ack
                jsr led_off

@load:
.endif
                jsr load_game

                jmp $5900

_exit:          
end:            jmp end


flash_system:
                jsr clear

                lda #<flashing
                sta ptr1
                lda #>flashing
                sta ptr1+1

                lda #0
                sta text_row
                sta text_col

                jsr draw_string_internal

                lda #<system
                sta ptr1
                lda #>system
                sta ptr1+1

                lda #3
                sta text_row

                jsr draw_string_internal

                jsr display

                ; copy flash_binary to $7C00

                lda #<flash_binary
                sta ptr1
                lda #>flash_binary
                sta ptr1+1

                lda #$00
                sta ptr2
                lda #$7C
                sta ptr2+1

                ldy #0
                ldx #3
@loop:
                lda (ptr1), y
                sta (ptr2), y
                iny
                bne @loop

                dex
                beq @done

                inc ptr1+1
                inc ptr2+1
                
                jmp @loop

@done:
                jmp $7C00

flash_binary:   .incbin "flash/flash"
flashing:       .byte "Flashing...", $0
game:           .byte "Game", $0
system:         .byte "System", $0